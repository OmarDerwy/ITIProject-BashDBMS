#! /usr/bin/bash
shopt -s extglob
source ./globFuncs
insertIntoFunc () {
    # echo $# #debug
    table_name=$1
    shift 1
    fields=()
    faultFlag=0
    while [[ $# -gt 0 ]];
    do
        fields+=("$1")
        # verification variables
        inputFieldName=$(awk -F: '{print $1}' <<< $1)
        data=$(awk -F: '{print $2}' <<< $1)
        recordedDatatype=$(awk -v name=$inputFieldName -F: '{if(name == $1) print $2}' "$table_name"_metadata)
        isPk=$(awk -v name=$inputFieldName -F: '{if(name == $1) print $3}' "$table_name"_metadata)
        declare -A seen
        # debug
        # echo input: $inputFieldName record: $recordedDatatype data: $data
        # check for duplicates
        if [[ -n "${seen[$inputFieldName]}" ]]; then
            echo "Please take care to avoid duplications"
            faultFlag=1
         # other validations
        elif [[ $isPk == "pk" ]]; then
            faultFlag=1
            echo You cannot insert a primary key
        elif [[ -z $recordedDatatype ]]; then
            faultFlag=1
            echo "The provided field name doesn't exist. Please try again."
        elif [[ $recordedDatatype == "int" ]]; then
            echo I am HERE
            if [[ ! $data =~ ^\s*-?[0-9]{1,}\s*$ ]]; then
                faultFlag=1
                echo The field you are trying to insert into requires an integer
            fi
        fi
        seen[$inputFieldName]=1
        shift 1
    done
    funcValidationMI 2 $table_name ${fields[@]} 
    if [ $? -eq 1 -o $faultFlag -eq 1 ]; then
        echo Critical error in function! Aborting...
    else
        # echo function reached!!! #debug
        pkVar=0
        while IFS= read -r line; do
            # echo boring function
            flag=0
            declare out
            if [[ "$pkVar" -eq 0 ]]; then
                pkVar=$(awk -F: '{if($3 == "pk"){print NR}}' <<< $line)
                echo pk function $pkVar
            fi
            existingField=$(echo "$line" | cut -d: -f1) 
            # echo "Existing Field: $existingField" #debug
            for inputField in ${fields[@]}
            do
                # echo Input field: $inputField #debug
                inputFieldName=`cut -d: -f1 <<< $inputField`
                    if [ $existingField == $inputFieldName ]; then
                        # echo Check #debug
                        inputFieldData=`cut -d: -f2 <<< $inputField`
                        flag=1
                        out+=$inputFieldData":"
                        break
                    fi
            done
            if [ $flag -eq 0 ]; then
                out+=:
            fi
        done < "$table_name"_metadata
        out=${out::-1}
        lastIter=$(awk -v pkVar=$pkVar -F: 'END {print $pkVar}' $table_name)
        out=$(awk -v pkVar=$pkVar -v lastIter=$lastIter -F: 'BEGIN{OFS=":"}{$pkVar = lastIter+1 ; print $0}' <<< $out)
        echo $out >> $table_name
        echo Record $out has been inserted into the table # debug

    fi
}

insertIntoWizard () {
    read -p "Please enter the name of the table you want to insert to: " tableName
    read -p "Please enter the number of columns: " columnNumber
    declare -i counter=1
    data=()
    names=()
    for ((counter=1;$counter<=$columnNumber;counter++))
    do
        read -p "please enter name of column $counter: " names[$(($counter-1))]
        read -p "Please enter the data: " data[$(($counter-1))]
    done
    echo column names: ${names[@]}
    echo column datat: ${data[@]}
    funcParam=""
    for ((counter=0;$counter<$columnNumber;counter++))
    do
        funcParam+=${names[$counter]}:${data[$counter]}' '
    done

    databaseInUse=$databaseInUseMenu
    # echo Param: ${funcParam[@]::-1} #debug
    insertIntoFunc $tableName ${funcParam[@]::-1}

}