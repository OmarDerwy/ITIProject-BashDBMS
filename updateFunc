#! /usr/bin/bash

updateFunc(){
    table_name=$1
    shift 1
    fields=()
    whereClause=()
    faultFlag=0
    declare -i whereClauseFlag=0
    while [[ $# -gt 0 ]];
    do
        if [[ ! $1 =~ ^[Ww][Hh][Ee][Rr][Ee]$ && $whereClauseFlag -eq 0 ]]; then
            fields+=("$1")
            # verification variables
            inputFieldName=$(awk -F: '{print $1}' <<< $1)
            data=$(awk -F: '{print $2}' <<< $1)
            recordedDatatype=$(awk -v name=$inputFieldName -F: '{if(name == $1) print $2}' "$table_name"_metadata)
            isPk=$(awk -v name=$inputFieldName -F: '{if(name == $1) print $3}' "$table_name"_metadata)
            declare -A seen
            # debug
            # echo input: $inputFieldName record: $recordedDatatype data: $data
            # check for duplicates
            if [[ -n "${seen[$inputFieldName]}" ]]; then
                echo "Please take care to avoid duplications"
                faultFlag=1
            # other validations
            elif [[ $isPk == "pk" ]]; then
                faultFlag=1
                echo You cannot modify a primary key
            elif [[ -z $recordedDatatype ]]; then
                faultFlag=1
                echo "The provided field name doesn't exist. Please try again."
            elif [[ $recordedDatatype == "int" ]]; then
                echo I am HERE
                if [[ ! $data =~ ^\s*-?[0-9]{1,}\s*$ ]]; then
                    faultFlag=1
                    echo The field you are trying to insert into requires an integer
                fi
            fi
            seen[$inputFieldName]=1
            shift 1
        else
            whereClauseFlag=1
            whereClause+=("$1")
            shift 1
        fi
    done
    # echo $# #debug
    funcValidationMI 2 $table_name ${fields[@]} ${whereClause[@]} 
    if [ $? -eq 1 -o $faultFlag -eq 1 -o -z $whereClause ]; then
        echo Critical error in function! Aborting...
    else
        # echo function reached!!! #debug
        whereClause=${whereClause[1]}
        # echo WHERE CLAUSE: $whereClause
        whereField=$(awk -F ":" '{print $1}' <<< "$whereClause")
        whereData=$(awk -F ":" '{print $2}' <<< "$whereClause")
        # echo Fields: ${fields[@]}
        # echo Where Field: $whereField
        # echo Where Data:  $whereData #debug

        columnPosition=$(
                        awk -v metaField="$whereField" '
                        BEGIN{
                                FS=":"
                        }
                        {
                                if($1==metaField){print NR}
                        }

                        ' "$table_name"_metadata
                    )
        
        rowData=$(awk -v metaField=$columnPosition -v whereData=$whereData '
                        BEGIN{
                            FS=":"
                        }
                        {
                            if($metaField==whereData){
                                print $1
                            }

                        }
                        END{}
                            ' $table_name)
        rowDataArr=()
        # IFS=' ' read -ra rowData <<< "$rowData"
        for ids in $rowData; do
            rowDataArr+=("$ids")
        done
        # echo Row Data: $rowData #debug
        # echo Row Data: ${rowDataArr[1]} #debug
        
        declare -i columnNo=0
        awk 'BEGIN{FS=":"} {print $1}' $table_name"_metadata" | while IFS= read -r existingField;
        do # This gets you from metadata field by field
            columnNo+=1
            # echo $existingField
            for inputField in ${fields[@]} # this gets you input fields by user
            do
                # echo Input field: $inputField #debug
                inputFieldName=`cut -d: -f1 <<< $inputField`
                    if [ $existingField == $inputFieldName ]; then
                        # echo Check #debug
                        inputFieldData=`cut -d: -f2 <<< $inputField`
                        # echo $inputFieldData $columnNo
                        awk -i inplace -v ids="$rowData" -v col="$columnNo" -v ifd="$inputFieldData" 'BEGIN{
                            FS=":"
                            OFS=":"
                            split(ids, arr, " ")
                        }{
                            for(id in arr){
                                if(arr[id] == $1)
                                {
                                    $col=ifd
                                }
                            }
                            print
                        }' $table_name
                        echo $inputFieldData has replaced data in fields where $whereClause
                        break
                    fi
            done
        done
        
    fi
}

updateTableWizard (){

    read -p "Please enter the name of the table you want to update to: " tableName
    read -p "Please enter the number of columns to update: " columnNumber
    declare -i counter=1
    data=()
    names=()
    for ((counter=1;$counter<=$columnNumber;counter++))
    do
        read -p "please enter name of column $counter: " names[$(($counter-1))]
        read -p "Please enter the data: " data[$(($counter-1))]
    done
    read -p "Please enter condition in this format [field]:[value]: " condition
    echo column names: ${names[@]}
    echo column datat: ${data[@]}
    funcParam=""
    for ((counter=0;$counter<$columnNumber;counter++))
    do
        funcParam+=${names[$counter]}:${data[$counter]}' '
    done

    databaseInUse=$databaseInUseMenu
    # echo Param: $tableName ${funcParam[@]::-1} WHERE $condition #debug
    updateFunc $tableName ${funcParam[@]::-1} WHERE $condition

}